#![allow(unused)]

use std::io;
use rand::Rng;
use std::io::{Write, BufReader, BufRead, ErrorKind};
use std::fs::File;
use std::cmp::Ordering;

// fn main() {
//     println!("what is ur name?");
//     let mut name:String = String::new();
//     let greeting: &str = "Nice to meet u!!";
//     io::stdin().read_line(&mut name)  
//     .expect("Didn't Receive Input");
// println!("Hello, {}! {}", name.trim_end(), greeting);
// }




// fn main() {
//     const ONE_MIL: u32 = 1_000_000;
//     const PI: f32 = 3.141592;
//     let age: &str = "47";
//     let mut age: u32 = age.trim().parse()
//     .expect("Age wasn't assigned a number");
// age = age + 1;
// println!("I'm {} and i want ${}", age, ONE_MIL);
// }






// ----- DATA TYPES -----
    // Rust is statically typed which means all types must be defined
    // These types are autogenerated by the compiler or defined explicitly

    // Unsigned integer : u8, u16, u32, u64, u128, usize
    // Signed integer : i8, i16, i32, i64, i128, isize

// fn main() {
// let max_u32 = u32::MAX;
//     println!("Max u32 : {}", max_u32);
//     println!("Max u64 : {}", u64::MAX);
//     // usize depends on your computer (If 64 bit then it's 64 bit)
//     println!("Max usize : {}", usize::MAX);
//     println!("Max u128 : {}", u128::MAX);

//     // Floating Points : f32, f64
//     println!("Max f32 : {}", f32::MAX);
//     println!("Max f64 : {}", f64::MAX);

// }





// fn main() {
//     let random_num: i32 = rand::thread_rng().gen_range(1..101);
//     println!("Random : {}", random_num);
// }


// fn main() {
//     let age = 0;
//     match age {
//         1..=18 => println!("you are young"),
//         21 | 50 => println!("you are adult"),
//         65..=i32::MAX => println!("you are old man"),
//         _=> println!("Not Important")
//     };
// }



fn main() {
   let  my_age:i32 = 18;
    let voting_age: i32 = 18;
    match my_age.cmp(&voting_age) {
        Ordering::Less => println!("Can't Vote"),
        Ordering::Greater => println!("Can Vote"),
        Ordering::Equal => println!("You just gained the right to vote!"),
    };
}